<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>博客创建记录</title>
      <link href="/2024/06/02/makeRecord/"/>
      <url>/2024/06/02/makeRecord/</url>
      
        <content type="html"><![CDATA[<p>今天发现新浪博客几乎已经是强弩之末了，加之学校不少人有创建类似的博客，于是心血来潮自己搭一个。</p><p>主要基于<a href="https://www.jianshu.com/p/4eaddcbe4d12">“简书”上的有关教程</a>和<a href="https://pdpeng.github.io/2022/01/19/setup-personal-blog/">另一个博客网站所有者的教程</a>操作。</p><h2 id="GitHub">GitHub</h2><p>首先生成了一个名为<code>k-pk66.github.io</code>的库。这个库的名称是GitHub账号的用户名。生成之后将主Branch更名为<code>master</code>，并通过<code>Settings&gt;Pages&gt;Build and Deployment</code>将Branch设定为了<code>master</code>。</p><h2 id="终端（Terminal）">终端（Terminal）</h2><p>通过homebrew为macOS安装git和nvm。后者是Nodejs版本管理器，可以轻松切换Nodejs版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">brew install git</span><br><span class="line">brew install nvm</span><br><span class="line"><span class="built_in">mkdir</span> ~/.nvm</span><br><span class="line"><span class="built_in">export</span> NVM_DIR=~/.nvm</span><br><span class="line">(brew --prefix nvm)/nvm.sh</span><br></pre></td></tr></table></figure><p>之后运用<code>nvm</code>安装Node.js。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install 4</span><br></pre></td></tr></table></figure><p>随后通过<code>npm</code>安装hexo。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>在此之后，创建名为<code>k-pk66.github.io</code>的文件夹并通过命令行打开。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init k-pk66.github.io</span><br><span class="line"><span class="built_in">cd</span> k-pk66.github.io</span><br></pre></td></tr></table></figure><p>文件夹中有名为<code>_config.yml</code>的配置文件；将该文件中的各键值对按<a href="https://hexo.io/zh-cn/docs/configuration.html">官方提供的指引文档</a>进行修改即可。由于设定的博客位于GitHub，因此需要对文件中的“部署（<code>deploy</code>）”区域进行如下设置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">http://github.com/k-pk66/k-pk66.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>文件夹所属<code>sources</code>文件夹的<code>_post</code>中有参考性质的Markdown文件。通过下方指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;makeRecord&quot;</span></span><br></pre></td></tr></table></figure><p>创建新的博客。</p><p>（更多撰写指引，请看<a href="https://hexo.io/docs/writing.html">这里</a>）</p><p>之后通过指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>对博客网页在<a href="http://localhost:4000/">本地</a>进行测试。</p><p>随后通过指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>安装自动部署发布工具。此后，每次更新博客只要输入指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>即可完成上传。</p><h2 id="GitHub的身份验证">GitHub的身份验证</h2><p>在首次输入上一章节的最后一个指令时命令行会引导输入GitHub账密。用户名与GitHub一致即可；当输入密码与正常登录所使用的密码一致时命令行将报错。<br>报错信息为“GitHub自2021年8月13日起不再支持密码认证”；因此需要通过GitHub账户个人设置中的开发者设置生成权限密钥（Personal access tokens）。在生成之后将输入密码替代为此token，即可完成上传。</p><h2 id="主题">主题</h2><p>在本博客发布为止博客使用的是butterfly主题。</p><p>在文件夹<code>k-pk66.github.io</code>的终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b master https://gitee.com/immyw/hexo-theme-butterfly.git themes/butterfly-former</span><br></pre></td></tr></table></figure><p>安装完成后<code>themes</code>文件夹即新增了butterfly主题的一部分文件。随后输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>安装渲染器等插件。最后在<code>_config.yml</code>文件中修改<code>theme</code>键值为<code>butterfly</code>，再进行测试即可查看效果。</p><h2 id="其他功能">其他功能</h2><h3 id="新增其他语言">新增其他语言</h3><blockquote>本章节将会对在butterfly主题中新增其他非中文语言的版本页面进行引导。</blockquote><p>本章节参考：<a href="https://shannonhung.github.io/posts/hexo-butterfly-lang-switch/">Shannon Hung有关内容的博客</a></p><p>使用<code>_config.yml</code>复制出<code>config-zh.yml</code>与<code>config-en.yml</code>两文件，随后删除原本的<code>_config.yml</code>。之后分别对两语言的<code>.yml</code>文件指定区域修改如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config-en.yml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 設定成英文</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 en </span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://&lt;url-url&gt;/en</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/en/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定啟動的路徑</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source-en</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public-en</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把中文的 source 進行排除</span></span><br><span class="line"><span class="attr">include:</span></span><br><span class="line"><span class="attr">exclude:</span></span><br><span class="line"><span class="attr">ignore:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">source/</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config-zh.yml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 設定成中文 </span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-TW</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用原本的url</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://shannonhung.github.io</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定啟動的路徑</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把英文的 source 進行排除</span></span><br><span class="line"><span class="attr">include:</span></span><br><span class="line"><span class="attr">exclude:</span></span><br><span class="line"><span class="attr">ignore:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">source-en/</span></span><br></pre></td></tr></table></figure><p>之后在原本中文文件夹<code>source</code>中新建文件夹<code>self</code>，随后创写文件<code>btf.js</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 判斷是否為英文</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">isIncludeEN</span> = item =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> key = <span class="string">&#x27;/en/&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> item.<span class="title function_">includes</span>(key)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 建立 重新導向到不同語言的 url </span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">loadFullPage</span> = <span class="function">(<span class="params">url</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = url</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 重新導向 </span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">eventFn</span> = (<span class="params">elements, includeEN</span>) =&gt; &#123;</span><br><span class="line">    elements.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!includeEN || !<span class="title function_">isIncludeEN</span>(item.<span class="property">href</span>)) &#123;</span><br><span class="line">        item.<span class="property">href</span> = <span class="string">`javascript:loadFullPage(&#x27;<span class="subst">$&#123;item.href&#125;</span>&#x27;);`</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判斷目前是否為英文</span></span><br><span class="line">  <span class="keyword">const</span> nowIncludeEN = <span class="title function_">isIncludeEN</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>)</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">const</span> selector = nowIncludeEN</span><br><span class="line">    ? <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;a[href^=&quot;https://k-pk66.github.io&quot;]&#x27;</span>)</span><br><span class="line">    : <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;a[href^=&quot;/en/&quot;]&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">eventFn</span>(selector, nowIncludeEN)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>随后复制<code>source</code>，粘贴在根目录下并将其命名为<code>source-en</code>作为存储英文页面的文件夹。此时<code>btf.js</code>应当也在<code>source-en/self</code>中。</p><p>之后将<code>_config.butterfly.yml</code>分身为<code>config-butterfly-en.yml</code>和<code>config-butterfly-zh.yml</code>。在这两个文件的底部分别添加<code>btf.js</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config-butterfly-former-zh.yml</span></span><br><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">data-pjax</span> <span class="string">src=&quot;/self/btf.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config-butterfly-former-en.yml</span></span><br><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">data-pjax</span> <span class="string">src=&quot;/en/self/btf.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>相信此时读者已经看出来了——所有在英文页面配置文件中的文件路径都需要在原本的路径的前方新增<code>/en/</code>。这是因为，本质上这两个页面互不相通；添加<code>/en/</code>才能使文档正常调用。</p><p>之后在<code>package.json</code>中调整<code>&quot;scripts&quot;</code>中的指令表，使命令行可以产生<code>public-en</code>文件夹——如此才能将英文页面推入仓库并予部署。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;push&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo clean &amp;&amp; hexo g &amp;&amp; hexo douban &amp;&amp; gulp &amp;&amp; hexo deploy&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;show&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo clean &amp;&amp; hexo g &amp;&amp; hexo s&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;update&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git init &amp;&amp; git add . &amp;&amp; git commit -m &#x27;backup&#x27; &amp;&amp; git push origin main&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;kk&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo clean &amp;&amp; hexo g &amp;&amp; hexo deploy&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;en&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo clean &amp;&amp; hexo g --config config-en.yml &amp;&amp; hexo s --config config-en.yml&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>最后新建<code>deploy.sh</code>文件对命令行的指令功能进行调整。本质上，这一文件会将两个不同语言的<code>config</code>、<code>config-butterfly</code>文件分别视作两个<code>_config.yml</code>和<code>_config.butterfly.yml</code>并分别进行部署或显示。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> [[ <span class="string">&quot;<span class="variable">$#</span>&quot;</span> -gt 0 ]]; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">        -h|--<span class="built_in">help</span>) </span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;Usage: bash.sh [en|zh|all|show &lt;en|zh&gt;|-h]&quot;</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;Options:&quot;</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;  [deploy|d] en   Deploy English configuration to GitHub Pages&quot;</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;  [deploy|d] zh   Deploy Chinese configuration to GitHub Pages&quot;</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;  [deploy|d] all  Deploy both English and Chinese configurations to GitHub Pages&quot;</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;  [show|s] en     Execute npm run show for English configuration&quot;</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;  [show|s] zh     Execute npm run show for Chinese configuration&quot;</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;  -h, --help      Display this help message&quot;</span></span><br><span class="line">            <span class="built_in">exit</span> 0</span><br><span class="line">            ;;</span><br><span class="line">        d | deploy)</span><br><span class="line">            lang=<span class="variable">$2</span></span><br><span class="line">            <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$lang</span>&quot;</span> = <span class="string">&quot;en&quot;</span> ] || [ <span class="string">&quot;<span class="variable">$lang</span>&quot;</span> = <span class="string">&quot;zh&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">cp</span> <span class="string">&quot;config-<span class="variable">$lang</span>.yml&quot;</span> _config.yml</span><br><span class="line">                <span class="built_in">cp</span> <span class="string">&quot;config-butterfly-<span class="variable">$lang</span>.yml&quot;</span> <span class="string">&quot;_config.butterfly.yml&quot;</span></span><br><span class="line">                npm run kk</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;Deploy <span class="variable">$1</span> success!&quot;</span></span><br><span class="line">            <span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$lang</span>&quot;</span> = <span class="string">&quot;all&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">                <span class="keyword">for</span> lang_choice <span class="keyword">in</span> <span class="string">&quot;zh&quot;</span> <span class="string">&quot;en&quot;</span>; <span class="keyword">do</span></span><br><span class="line">                    <span class="built_in">cp</span> <span class="string">&quot;config-<span class="variable">$lang_choice</span>.yml&quot;</span> _config.yml</span><br><span class="line">                    <span class="built_in">cp</span> <span class="string">&quot;config-butterfly-<span class="variable">$lang_choice</span>.yml&quot;</span> <span class="string">&quot;_config.butterfly.yml&quot;</span></span><br><span class="line">                    npm run kk</span><br><span class="line">                    <span class="built_in">echo</span> <span class="string">&quot;Deploy <span class="variable">$lang_choice</span> success!&quot;</span></span><br><span class="line">                <span class="keyword">done</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;Error! Please input &#x27;en&#x27; or &#x27;zh&#x27; or &#x27;all&#x27;!&quot;</span></span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">            ;;</span><br><span class="line">        s | show)</span><br><span class="line">            lang=<span class="variable">$2</span></span><br><span class="line">            <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$lang</span>&quot;</span> = <span class="string">&quot;en&quot;</span> ] || [ <span class="string">&quot;<span class="variable">$lang</span>&quot;</span> = <span class="string">&quot;zh&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">cp</span> <span class="string">&quot;config-<span class="variable">$lang</span>.yml&quot;</span> _config.yml</span><br><span class="line">                <span class="built_in">cp</span> <span class="string">&quot;config-butterfly-<span class="variable">$lang</span>.yml&quot;</span> <span class="string">&quot;_config.butterfly.yml&quot;</span></span><br><span class="line">                npm run show</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;Running npm show!&quot;</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;Error! Please use &#x27;./bash.sh show en&#x27; or &#x27;./bash.sh show zh&#x27;!&quot;</span></span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">            <span class="built_in">shift</span> <span class="comment"># Move to the next argument after &#x27;show&#x27;</span></span><br><span class="line">            ;;</span><br><span class="line">        *)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;Error! Please input deploy &lt;en|zh|all&gt; or &#x27;show &lt;en|zh&gt;&#x27; or &#x27;-h&#x27; for help!&quot;</span></span><br><span class="line">            <span class="built_in">exit</span> 1</span><br><span class="line">            ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line">    <span class="built_in">shift</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>之后将该文件通过命令行设为可执行文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x deploy.sh</span><br></pre></td></tr></table></figure><p>此后，只要输入指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./deploy.sh d all</span><br></pre></td></tr></table></figure><p>即可将所有语言均予部署。</p><h2 id="TikZ支持">TikZ支持</h2><p>通过指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-filter-tikzjax</span><br></pre></td></tr></table></figure><p>实现对TiKz包的安装。这个包将支持把TikZ代码渲染为SVG矢量图；只需要在每篇文章的<code>Front matters</code>区域输入<code>tikzjax: true</code>即可。</p><p>详细操作可以通过<a href="https://github.com/prinsss/hexo-filter-tikzjax">这里</a>寻得。</p><h2 id="Troubleshoot">Troubleshoot</h2><p>后续在实际撰稿过程中遇到了一些问题，在这里列举。</p><h3 id="过大文件">过大文件</h3><p>由于GitHub本身对上传的单个文件空间大小有要求（不得超过100MB），因此不建议上传视频。</p><p>如误上传了超过100MB的文件，命令行会在push时返回信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">remote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.</span><br></pre></td></tr></table></figure><p>在稿件中对应位置移除该大文件后push，依然会有此报错。解决此问题，需要在<code>.deploy_git</code>文件夹中打开命令行，输入指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><p>通过回车寻找上传大文件前的最后一个版本（可以根据时间找；也可以是更早的版本），复制这一版本对应<code>commit</code>后方的版本号。</p><p>假定命令行有输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">commit 6657f1c73af4254557e77c3dd2c681ddf10e5d51 (HEAD -&gt; master)</span><br><span class="line">Author: K-PK66 &lt;example@example.com&gt;</span><br><span class="line">Date:   Mon Jun 3 12:26:51 2024 +0800</span><br><span class="line"></span><br><span class="line">    Site updated: 2024-06-03 12:26:49</span><br><span class="line"></span><br><span class="line">commit 35a21f2e94c5022503cfbce29ff2dacf2b497cd2</span><br><span class="line">Author: K-PK66 &lt;example@example.com&gt;</span><br><span class="line">Date:   Mon Jun 3 01:28:30 2024 +0800</span><br><span class="line"></span><br><span class="line">    Site updated: 2024-06-03 01:28:30</span><br></pre></td></tr></table></figure><p>想要恢复至2024年6月3日东八区时间1时28分30秒的版本，则需要用指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset 35a21f2e94c5022503cfbce29ff2dacf2b497cd2</span><br></pre></td></tr></table></figure><p>将<code>.deploy_git</code>恢复至当时。然后再进行推送即可恢复正常。</p><h3 id="字体">字体</h3><p>通过在主题文件夹中的<code>source</code>文件夹中新建<code>fonts</code>文件夹，并向其中放入字体<code>ttf</code>（或<code>otf</code>，<code>woff</code>等）扩展名的字体文件。随后在主题文件夹中<code>css</code>文件夹新建<code>css</code>文件并向其中引入该字体。</p><p>以向本博客引入字体“A-OTF Shin Go Pro Regular”，并将其命名为“A-OTF Shin Go Pro R”为例。将名为<code>AOTFShinGoProRegular.woff</code>的字体文件放入<code>fonts</code>文件夹，随后在<code>css</code>文件夹中新建<code>my.css</code>并编写如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;A-OTF Shin Go Pro R&#x27;</span>;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">local</span>(<span class="string">&#x27;A-OTF Shin Go Pro R&#x27;</span>), <span class="built_in">url</span>(<span class="string">&#x27;../fonts/AOTFShinGoProRegular.woff&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;A-OTF Shin Go Pro R&#x27;</span>, sans-serif;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后在主题<code>_config.yml</code>文件中指定板块写如下代码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Inject</span></span><br><span class="line"><span class="comment"># Insert the code to head (before &#x27;&lt;/head&gt;&#x27; tag) and the bottom (before &#x27;&lt;/body&gt;&#x27; tag)</span></span><br><span class="line"><span class="comment"># 插入代码到头部 &lt;/head&gt; 之前 和 底部 &lt;/body&gt; 之前</span></span><br><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/my.css&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">  <span class="comment"># - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>即可。</p><p>特别地，如果仅想对特定的字母/符号使用该字体，可使用在线字体提取工具（例如<a href="https://font-subset.disidu.com">这个工具</a>）对指定字符的该字体进行提取并重新包装为新字体文件，按上述方法安装。</p><h3 id="上传过程中遭遇卡顿（仅限中国大陆地区）">上传过程中遭遇卡顿（仅限中国大陆地区）</h3><p>由于GitHub在中国大陆地区的访问过程中已经收到严重的DNS污染，不可避免地会出现在使用上传博客指令后无法连接GitHub服务器（或上传过程中断开连接）的情况。针对此可灵活使用中国大陆访问较快的Gitee进行操作。</p><blockquote>由于Gitee Pages在2022年左右起已经停止服务，所以此处不推荐直接在Gitee上建立仓库的手段。</blockquote><p>首先建立一个Gitee账号并创建仓库。之后在该仓库“管理/仓库镜像管理”中设置GitHub的仓库作为Gitee仓库的镜像，并设置方向为由Gitee仓库Push到GitHub仓库。随后在GitHub个人设置中使用先前“<a href="#GitHub%E7%9A%84%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81">GitHub的身份验证</a>”章节提到的方法生成权限密钥之后在指定位置输入；在完成添加镜像后，将<code>_config.yml</code>指定位置修改如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="comment">#- type: git</span></span><br><span class="line">  <span class="comment">#  repo: https://github.com/k-pk66/k-pk66.github.io.git</span></span><br><span class="line">  <span class="comment">#  branch: master</span></span><br><span class="line">  - <span class="built_in">type</span>: git</span><br><span class="line">    repo: git@gitee.com:k-pk66/blog.git</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure><p>再输入博客上传指令，命令行将会在Gitee的仓库中更新博客；而仓库更新后会自动将更改写入GitHub。这时可以明显感觉到上传的速度增快了。</p>]]></content>
      
      
      <categories>
          
          <category> Configuration </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #环境配置# </tag>
            
            <tag> #命令行# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「L&#39;ÉPOQUE.」</title>
      <link href="/2024/03/02/original-liveries-2024-spring/"/>
      <url>/2024/03/02/original-liveries-2024-spring/</url>
      
        <content type="html"><![CDATA[<p>今年春运期间最早让社团注意到的临客列车莫过于往返于北京与眉山的K4219／20次列车——这趟列车在进京方向的全程硬座车票票价只需要49元。虽然后续廉价的硬座车票和对应的折扣在售票平台逐渐变多，但作为最早发现的“先行者”，这趟车确给我们留下的印象为最深。可惜的是我们发现时寒假已经开始，于是没有第一时间去薅中国铁路的羊毛；但幸运的是今年春运的结束时间在寒假结束之后，因此我们依然有机会乘坐到这趟便民列车。 巧合的是在回到学校的一两天之后我们无意间在网络上看到了春运期间另一列经过西安境内的K4079／80次列车，同为临客的它3组车底中有1组坐拥足足9节原色25G型客运列车，而剩下的2列中分别有4节和3节。</p><p>我见识到北京铁路局的原色之余裕最早是在K214次列车上——这趟由西安到天津的列车2组车底中有1组含有原色25G型行李车。在这之后便听说北京铁路局热衷于保留一些红色涂装的25G型客车；甚至有时会将返厂的25G由绿色重新刷回红色。在听说北京铁路局今年的临客含有原色的消息之后我第一时间便想起了当时在张桥站甩下赤光之尾的身影，于是果断加入前往的队伍。</p><p><img src="K214-XL25G.gif" alt="2023年10月14日在张桥站拍摄的K214次列车所使用的原色行李车XL25G-205708。虽然标着25G，但其实是由25B改造而来"></p><p>由于这趟车从离京到返京所需要的时长就已经过了接近3天，所以显然这3组车底是同时在路上跑的。根据这些视频提供的信息，我们决定3月1日前往引镇站乘坐那列凭廉价车票闻名全国的列车前往镇安站，随后在镇安立即乘这趟至少有3节原色车厢的临客回引镇。根据计算，我们在引镇站等候K4219到站之前会先看到拥有9节原色车厢的K4079次列车跨站。</p><h2 id="等待原色（K1004／1）">等待原色（K1004／1）</h2><p>由于K4079在西安境内不停靠任何一站，我们也不能确定这趟列车会不会比预计跨越引镇站的时间更早；因此我们一早就到了引镇站附近准备拍摄。这一天本来是阴天，但在我们赶到引镇站时突然下起小雨，旋即又由小雨变为了小雪。我们虽然带了伞，但又害怕伞挡住彼此的视线和摄像头，所以万般无奈之下只能冒雪站在一处铁路维护工人用入口。</p><p>按照先前几天情况估测，列车会在17:25左右经过引镇；但我们到17:40也没有等到。这时引镇站站台上突然传来提示铃声，旋即是一阵女声。</p><p>“上行有车进站。”</p><p>西康铁路上行应当是由安康方向来的列车。我们根据引镇站当天的时刻表进行比较（引镇站不支持早晚点查询），发现这个时间段应当是没有列车的。于是我们便以为是货车。不一会我们就能看到远方高处车头所发出的白光了；但雨雪连同着雾让我们还看不清楚。又过了一会发现车头的颜色是枣红色而不是灰蓝色；这时我们才意识到这应该是客运列车。我站在他们南边，是我们一行人当中最有可能先看到这趟车之所从来的人；通过摄像头放大，我看到了这一抹枣红的后方是一台空调发电车，再往后的车厢略高一些；又过了几秒，终于能看清这“更后方”的车厢了——它的车窗有上有下。</p><p>“是<ruby><rb>K</rb><rt>快</rt></ruby>1004！”</p><p>我尽量保持着只能让声音扩散到他们的耳朵中而不是更远的音量轻喊。他们顿时露出了不可置信的表情；这个表情旋即又变成了惊喜。K1004／1次列车正常到达引镇的时间是18:00，我们在这个时刻能够见到这班车就意味着这趟双层列车在16:06准时从旬阳北发车之后一路没有遭遇任何困难路段应有的困难，最终才能早点足足20分钟进入西安境内。我们自然是要拍照的；这趟车虽然是1月调图后新增的图定列车，但至于后续会不会因为“淡季”之类的原因停开，我们也不能肯定。</p><p><img src="/images/HXD3D-0539_Locomotive_dragging_Double_Decker_25K_coach_(K1001,_-4)_Approaching_Yinzhen_Railway_Station,_Mar_1_2024.jpg" alt="K1004次列车冲破雨雪即将进入引镇站"></p><p>随后又等了些时间，但那列9节原色终于也没有来；K4219即将开始检票了，我们也就因此往车站走。</p><h2 id="引镇—镇安（K4219）">引镇—镇安（K4219）</h2><p><img src="dest_board_k4219.jpg" alt="传奇低价列车的车底似乎有着不为人知的过去？"></p><p>因为引镇站不是一个等级很高的站，所以停靠的时间并不长。在站务的催促声中我们上了车，但车门还没有关；我靠在另一侧的车门旁，望着远处的原色双层，心中又有些莫名的遗憾。</p><p>此时突然从彼端原色双层的窗户中产生了白色的反光——似乎是有车来。我连忙打开摄像头，准备录制这列可能是我们所想的那班车的经过；结果不出我所料，正是那列我们翘首已久的列车。</p><table style="text-align: center"><tr><td colspan="3"><video id="video" controls="controls" preload="none" poster="" width="100%"><source id="webm" src="Original_liveries_meet.webm" type="video/webm"></video>2024年3月1日傍晚出现在引镇站和视频镜头拍摄范围内的原色车厢</td></tr><tr><td colspan="3">K4079次（排名按镜头中出现顺序从先到后）</td></tr><tr><td>YZ25G-343937</td><td>YZ25G-343120</td><td>YZ25G-343926</td></tr><tr><td>YW25G-668668</td><td>YW25G-669866</td><td>YW25G-669861</td></tr><tr><td>YW25G-669459</td><td>YW25G-669857</td><td>YW25G-669871</td></tr><tr><td colspan="3">K1004／1（排名按镜头距离由近及远）</td></tr><tr><td>SCA25K-892717</td><td>SYZ25K-345608</td><td>SYZ25K-345604</td></tr></table><p>随行的其他人因为不在同一节车厢此时正忙着向餐车走，只是目击到了它的经过，终于是没有记录下来。我们都没有吃晚饭；由于我离餐车比较近，所以只需要站在原地等他们即可。不过多时我们汇合了；他们看了我的视频也心生几分羡慕。餐车上的餐食比陆地上的卖的贵很多，但不论如何还是买了。</p><p>这趟车从引镇准时出发，路上因为尽是隧道所以也没有什么可说的。车厢也是很普通的25G型客车车厢。</p><p>过了大约1个小时，列车进入镇安站；我们在这一站下了车。在十分钟后，我们要重新进站检票，登上返程的原色之旅。</p><p><img src="Zhen'an.jpg" alt="省电，但不多"></p><h2 id="镇安—引镇（K4080）">镇安—引镇（K4080）</h2><p>3月1日离两会已不剩几天了，因此又到了一年数度的进京方向列车乘客需要进行二次安检的时间——就算是临客普快也不例外。随行的一位朋友带的三角钥匙在这第二次安检中被镇安站方面以“可能对行车造成危险”为由扣了下来——虽然从这个钥匙用来打开车窗的功能上结合如今“铁路禁止开窗”的规定来看确有这个可能。我们说笑着重新登上镇安站台，等待今晚正菜的到来。</p><video id="video" controls="controls" preload="none" poster="" width="100%"><source id="webm" src="k4080_approaching.webm" type="video/webm"></video><div style="text-align: center;width: 100%; color: #999">镇安站用灯光秀欢迎原色大驾光临</div><p><img src="dest_board_k4080.jpg" alt="无须多言"></p><p>这一天北上的K4080次列车一共有4节原色25G客车。本来是要进行验票的，但北京铁路局的工作人员们被镇安车站告知他们在这个车站只停2分钟，所以就又放弃了。在匆忙中上车之后，我们从原本应该进行验票的车厢向餐车走去；路上经过的一节车厢跟其他车厢虽都为25G型硬座客车车厢，但硬件设施完全不同。</p><video id="video" controls="controls" preload="none" poster="" width="100%"><source id="webm" src="YZ25G-345014_inside.webm" type="video/webm"></video><div style="text-align: center;width: 100%; color: #999">25G型345014号硬座车厢内部</div><p><img src="Toilet_Occupation_Indicator_of_YZ25G-345014_Coach,_Mar_1_2024.jpg" alt="25G型345014号硬座车厢一端的厕所占用指示灯。我从未见过25G型客车上装载这种样式的指示灯"></p><p>这显然是早期型的25G型塞拉门式硬座客车。不过我们在前往餐车的过程中只经过了一列这样的列车；到餐车后我们当中有人想要拍照，被餐车中的工作人员发现及时报告给了同样在餐车准备吃饭的列车长。列车长闻言立即高声表达了对我们的准许；我们随机感谢了他们，同时也轻松了很多。还没有吃饱，在这趟车上又点了一份蒜苔炒肉；这趟车上的餐价就比刚刚来时那辆要亲民很多。从端上来的餐盘和列车员挂在衣钩上的大衣上的名牌来看，这趟车属于北京铁路局石家庄客运段；随行的这位朋友也来自石家庄，于是主动光顾生意，又要了几份烤馍片。</p><p>饭饱之后大概30分钟，列车早点停靠在引镇站。我们从餐车经软卧车厢走到出口；这时留意到这节软卧车厢的门有些古典，旋即抬头看到了“552”开头的铭牌；这是第一代25G型软卧列车。</p><video id="video" controls="controls" preload="none" poster="" width="100%"><source id="webm" src="YW25G_inside.webm" type="video/webm"></video><div style="text-align: center;width: 100%; color: #999">552287号软卧车厢是第一代25G型软卧列车；其各隔间门均为塞拉门。</div><p>由于上车时比较仓促、这趟列车在引镇站会停靠20分钟，所以给了我们充足的拍摄时间。</p><table style="text-align: center"><tr><td colspan="4"><img src="YW25G-669449_&_YW25G-669686_Coach_Joint,_Mar_1_2024.jpg" />2024年3月1日晚离开引镇站的K4080次列车所含原色列车车厢</td></tr><tr><td><img src="YW25G-669449.jpg" />YW25G-669449</td><td><img src="YW25G-669686.jpg" />YW25G-669686</td><td><img src="YW25G-669688.jpg" />YW25G-669688</td><td><img src="YW25G-670389.jpg" />YW25G-670389</td></tr></table><p>北京铁路局的车务们对我们非常友好，没有对我们的拍摄进行任何阻拦。在简单的留影之后，晚间的原色之旅就告一段落了。</p><h2 id="写在最后">写在最后</h2><p>当我们离开引镇站之后，我打开12306手机应用，发现3月2日开始就没有K4079次列车南下了。换言之，明天经引镇站北上的9节原色是K4080次列车在今年春运的最后一舞。南下的K4219在3月3日起才不再南下；但不论怎样，今年的春运是基本到此结束了。</p><p>春运作为一年一度的中国最大人口迁徙事件如今也已经成为了一项“政治任务”，北京铁路局把这些古董车厢都拉出来跑长途除了有对自己的车体所抱有的自信，也有保障所有劳工都能够回家过年的决心。“人民铁道为人民”；纵使未来普速铁路逐渐被高速铁路所取代，春运的便民票价也应当还会持续——从截至目前为止的动集折扣来看，铁路部门还没有抢钱的打算。</p><p>虽然北京铁路局在最近几年“刷绿狂潮”有所减缓的情况下报复性地给25G型客车刷红，但这些车从编号来看确实都是很老的客车；这些车可能就没有被刷绿过，而是在库中保存（必要的时候拉出来跑一些临客）——待到了年限就直接报废。和先前在宝成铁路上所乘坐的6063／4次列车体验感不同，虽然现已同为25G型客车，但在这种25B味道更浓一些的车厢中更有一种回归上世纪末春运的感觉；待到这些真正老的车厢退役之后，也许会有新的车厢被刷回所谓的“原色”，但2015年后出厂的车厢本身就是橄榄绿色——</p><p><strong>到那时我们所追随的所谓“原色”还属于我们原本所怀念、热爱的那个时代吗？也许那时我们所追思的又将变成仅剩的那几抹昔日我们所不齿的墨绿色了罢。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Railways </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #原色# </tag>
            
            <tag> #中国铁路# </tag>
            
            <tag> #铁路# </tag>
            
            <tag> #西康铁路# </tag>
            
            <tag> #春运# </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
