<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>汇丰实训日志</title>
      <link href="/2025/07/06/hsbc-trainings/"/>
      <url>/2025/07/06/hsbc-trainings/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误。" data-whm="此密码无法被校验；您仍可解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="7c5f9693899f59bf5e8bc03ae14b26f64b6a2b0c95cf101f1b6f3b2d9b7a3bb6">fa27a9c7cd82988cf3e3644fc2b29bef0a8c9ab63ea1b68f9dfd3002455b7fb8dedf2b93cc8dc9fed7deef169da76038e5fe497a6a1ea78e3ae6df714712d51a35e708ea34a1b5bf885923a507883f010990bded1a121c26edf05ae880a3ffe139c2ba41ec9097a57bece3cdfec5991fec20aacd45969ed4bfdec53fe7c8cec15d3ab9948e3f8ec40377b0ba3ba1451ca3e1308e17e3161e0dcabc23da70a1015b9398721ffb2fd6d4ffea6aab5f5f054d6f1ae8658d8d3b266dd96fb0ee846f1d937cbc3a55d59f7050ab6d6fa651e7bed4b543afd165788755097fc5d37e85fa9245e65aa080ebab61abbfbfeb697668027629823f45887b3375f88b5636e41871fa1ff84363633b3e8abd91d9f98e08579231d6cb96ace03de28bd409d3f579f792af4130acf331feab04d4b54dbb983ee0b538f140ef8484525aee19734bdef847d1947448b45f637914d46bc3f858b05d11e7afe0512694400029da755586c77e7ee40b1268de406f121b2399e621ff16d737947fd92cc190bc259941935c5edbbc53687198228f9b21183a97c21f12405dcc8cfa6d80035dbc11efed7bccfed67616089c02bade080aa9d2ee5a44b16da0fe03f7c61e41d831e6964709eb10471c4182da6b41a31ac6924c383698fb6cfa7ee6562afa34e45231bbd34128071995623c3833ae0d2f88bc775f2b17cddd90957a3e8d83629962c6046e972abd7a590667d1f74d6abebfc4022aca53e51237adaf8cf3c80f911806b7bd49d06e1c67549c3001ad5f4042de1dc7f84aae45e174ec103a41a11b0c9f8e330490309b1b910560812b00978773bf41f5eec4df179921252ef22694c489d87f5d8178a0e5803d6bbc73dc792937945840fc8cc8d251e889cd2cc170bea77bab887f29deb423fff030c300d1b1b53f2a568e4740240da6c0d8664ba63b0fd18110cd1c6c4799e648fdecf4dc6399e94a065bb6ec60a90ac5314e943740fc0b40b49001e3c374eb7a3c1c052e34ed7cf111d12d717a5395cd1919a594eb99700e33689d60c67f17a31eef9d20f5e2ed3768e79add41e57ce5625fd9b59fc9f4ca1f850316c7c391a1291dc60b595e755c7ea2b27249e8139489c6eea5c7558aaac22062b9560d2cd5d46549c51a114911a83a05bb8a40c812eb8d4814f1b50496207ca29b1579c0a3bb874b339f47de0ee0c2c5eabf3c74432cdf9602daf45ceb45de95225bf8dedd60d865419de6f4b880c0bf214f3b8b4b38a601d9ef29b18f062198b221f2d237f1a519d1100338072d63aaa00bdb6bdcbacee38eca29562b0344322378839de79fa260b8116c80db796ab26741163fe38722191f73f06b621a4ad17ec2a902528a9d86896768bac1fbafe9018abc9808d6002b4c6caf57de544e2ac6f0202520d4dbf98a916d79d1e446a85309ca3bf9546935634b3b17043ee1274ba315fcaeda461d93c684040b889453e3000fec1fc46b7c5c33eff8303f8e298e0a2c056a4beec5e29314dee5208e209bd82fe628f532a8d6c688c7bf8f0b9bb24b6f1287d7d91bcecb2c25311dbafe1cb7573a21a5a64deab56c732dcad4801a69905636bbb9fa710506611d6b67edfd6214b2212cd3a0c49d9ec2e432e35e964b3f6b98255df91f26dc6201b592c2b561c2573b0a2fd55caaf1ac460b8e506a009a97faa6a49541cb8962a1dfdfa703b54b4f27b64055288cf619fcfe4ada0519c0d53bd28032b102698e9f3ab7aa9982708698253cab47bd8022e1006a9b4df6103505b141b39a072b090e1fc51eb4576f9f50471065fb78ff41941a166ba917a4bea5742f1286a11d042d2acfea98ea48b60ff4eb28b498bb75c3c25dccd8cb48ea3b1414a4e578435e84f4821b7e7b931961fbbce7c57aafea63c8fbdcecd474a7aca078663fd5826398a63cbfad9e4422d89badaf3f639d3fc290c24ee95cd8f5d556c02be3be3e80f963404246a1dca69218e2a1df0a9fef8f9bc2733d835ab49da3d0ec71122a7322aa3afe3ede4c3717690947ad734b2cd5a08edbcbde5f3d637636c4a051b5d23e089ef8b5bdf02fdf3ed7f7adf9a58b95579a30f48e08530c2fd1db7f2a7f2e8a67180e48b8249afb3fe14d38e8b85c0fad</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-wave">      <input class="hbe hbe-input-field hbe-input-field-wave" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-wave" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-wave">The article will remain unreadable until decrypted by the correct password.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-wave" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> Work Log </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客创建记录</title>
      <link href="/2024/06/02/makeRecord/"/>
      <url>/2024/06/02/makeRecord/</url>
      
        <content type="html"><![CDATA[<p>今天发现新浪博客几乎已经是强弩之末了，加之学校不少人有创建类似的博客，于是心血来潮自己搭一个。</p><p>主要基于<a href="https://www.jianshu.com/p/4eaddcbe4d12">“简书”上的有关教程</a>和<a href="https://pdpeng.github.io/2022/01/19/setup-personal-blog/">另一个博客网站所有者的教程</a>操作。</p><h2 id="GitHub">GitHub</h2><p>首先生成了一个名为<code>k-pk66.github.io</code>的库。这个库的名称是GitHub账号的用户名。生成之后将主Branch更名为<code>master</code>，并通过<code>Settings&gt;Pages&gt;Build and Deployment</code>将Branch设定为了<code>master</code>。</p><h2 id="终端（Terminal）">终端（Terminal）</h2><p>通过homebrew为macOS安装git和nvm。后者是Nodejs版本管理器，可以轻松切换Nodejs版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">brew install git</span><br><span class="line">brew install nvm</span><br><span class="line"><span class="built_in">mkdir</span> ~/.nvm</span><br><span class="line"><span class="built_in">export</span> NVM_DIR=~/.nvm</span><br><span class="line">(brew --prefix nvm)/nvm.sh</span><br></pre></td></tr></table></figure><p>之后运用<code>nvm</code>安装Node.js。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install 4</span><br></pre></td></tr></table></figure><p>随后通过<code>npm</code>安装hexo。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>在此之后，创建名为<code>k-pk66.github.io</code>的文件夹并通过命令行打开。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init k-pk66.github.io</span><br><span class="line"><span class="built_in">cd</span> k-pk66.github.io</span><br></pre></td></tr></table></figure><p>文件夹中有名为<code>_config.yml</code>的配置文件；将该文件中的各键值对按<a href="https://hexo.io/zh-cn/docs/configuration.html">官方提供的指引文档</a>进行修改即可。由于设定的博客位于GitHub，因此需要对文件中的“部署（<code>deploy</code>）”区域进行如下设置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">http://github.com/k-pk66/k-pk66.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>文件夹所属<code>sources</code>文件夹的<code>_post</code>中有参考性质的Markdown文件。通过下方指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;makeRecord&quot;</span></span><br></pre></td></tr></table></figure><p>创建新的博客。</p><p>（更多撰写指引，请看<a href="https://hexo.io/docs/writing.html">这里</a>）</p><p>之后通过指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>对博客网页在<a href="http://localhost:4000/">本地</a>进行测试。</p><p>随后通过指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>安装自动部署发布工具。此后，每次更新博客只要输入指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>即可完成上传。</p><h2 id="GitHub的身份验证">GitHub的身份验证</h2><p>在首次输入上一章节的最后一个指令时命令行会引导输入GitHub账密。用户名与GitHub一致即可；当输入密码与正常登录所使用的密码一致时命令行将报错。<br>报错信息为“GitHub自2021年8月13日起不再支持密码认证”；因此需要通过GitHub账户个人设置中的开发者设置生成权限密钥（Personal access tokens）。在生成之后将输入密码替代为此token，即可完成上传。</p><h2 id="主题">主题</h2><p>在本博客发布为止博客使用的是butterfly主题。</p><p>在文件夹<code>k-pk66.github.io</code>的终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b master https://gitee.com/immyw/hexo-theme-butterfly.git themes/butterfly-former</span><br></pre></td></tr></table></figure><p>安装完成后<code>themes</code>文件夹即新增了butterfly主题的一部分文件。随后输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>安装渲染器等插件。最后在<code>_config.yml</code>文件中修改<code>theme</code>键值为<code>butterfly</code>，再进行测试即可查看效果。</p><h2 id="其他功能">其他功能</h2><h3 id="新增其他语言">新增其他语言</h3><blockquote>本章节将会对在butterfly主题中新增其他非中文语言的版本页面进行引导。</blockquote><p>本章节参考：<a href="https://shannonhung.github.io/posts/hexo-butterfly-lang-switch/">Shannon Hung有关内容的博客</a></p><p>使用<code>_config.yml</code>复制出<code>config-zh.yml</code>与<code>config-en.yml</code>两文件，随后删除原本的<code>_config.yml</code>。之后分别对两语言的<code>.yml</code>文件指定区域修改如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config-en.yml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 設定成英文</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 en </span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://&lt;url-url&gt;/en</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/en/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定啟動的路徑</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source-en</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public-en</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把中文的 source 進行排除</span></span><br><span class="line"><span class="attr">include:</span></span><br><span class="line"><span class="attr">exclude:</span></span><br><span class="line"><span class="attr">ignore:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">source/</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config-zh.yml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 設定成中文 </span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-TW</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用原本的url</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://shannonhung.github.io</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定啟動的路徑</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把英文的 source 進行排除</span></span><br><span class="line"><span class="attr">include:</span></span><br><span class="line"><span class="attr">exclude:</span></span><br><span class="line"><span class="attr">ignore:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">source-en/</span></span><br></pre></td></tr></table></figure><p>之后在原本中文文件夹<code>source</code>中新建文件夹<code>self</code>，随后创写文件<code>btf.js</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 判斷是否為英文</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">isIncludeEN</span> = item =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> key = <span class="string">&#x27;/en/&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> item.<span class="title function_">includes</span>(key)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 建立 重新導向到不同語言的 url </span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">loadFullPage</span> = <span class="function">(<span class="params">url</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = url</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 重新導向 </span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">eventFn</span> = (<span class="params">elements, includeEN</span>) =&gt; &#123;</span><br><span class="line">    elements.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!includeEN || !<span class="title function_">isIncludeEN</span>(item.<span class="property">href</span>)) &#123;</span><br><span class="line">        item.<span class="property">href</span> = <span class="string">`javascript:loadFullPage(&#x27;<span class="subst">$&#123;item.href&#125;</span>&#x27;);`</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判斷目前是否為英文</span></span><br><span class="line">  <span class="keyword">const</span> nowIncludeEN = <span class="title function_">isIncludeEN</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>)</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">const</span> selector = nowIncludeEN</span><br><span class="line">    ? <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;a[href^=&quot;https://k-pk66.github.io&quot;]&#x27;</span>)</span><br><span class="line">    : <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;a[href^=&quot;/en/&quot;]&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">eventFn</span>(selector, nowIncludeEN)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>随后复制<code>source</code>，粘贴在根目录下并将其命名为<code>source-en</code>作为存储英文页面的文件夹。此时<code>btf.js</code>应当也在<code>source-en/self</code>中。</p><p>之后将<code>_config.butterfly.yml</code>分身为<code>config-butterfly-en.yml</code>和<code>config-butterfly-zh.yml</code>。在这两个文件的底部分别添加<code>btf.js</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config-butterfly-former-zh.yml</span></span><br><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">data-pjax</span> <span class="string">src=&quot;/self/btf.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config-butterfly-former-en.yml</span></span><br><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">data-pjax</span> <span class="string">src=&quot;/en/self/btf.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>相信此时读者已经看出来了——所有在英文页面配置文件中的文件路径都需要在原本的路径的前方新增<code>/en/</code>。这是因为，本质上这两个页面互不相通；添加<code>/en/</code>才能使文档正常调用。</p><p>之后在<code>package.json</code>中调整<code>&quot;scripts&quot;</code>中的指令表，使命令行可以产生<code>public-en</code>文件夹——如此才能将英文页面推入仓库并予部署。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;push&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo clean &amp;&amp; hexo g &amp;&amp; hexo douban &amp;&amp; gulp &amp;&amp; hexo deploy&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;show&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo clean &amp;&amp; hexo g &amp;&amp; hexo s&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;update&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git init &amp;&amp; git add . &amp;&amp; git commit -m &#x27;backup&#x27; &amp;&amp; git push origin main&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;kk&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo clean &amp;&amp; hexo g &amp;&amp; hexo deploy&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;en&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo clean &amp;&amp; hexo g --config config-en.yml &amp;&amp; hexo s --config config-en.yml&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>最后新建<code>deploy.sh</code>文件对命令行的指令功能进行调整。本质上，这一文件会将两个不同语言的<code>config</code>、<code>config-butterfly</code>文件分别视作两个<code>_config.yml</code>和<code>_config.butterfly.yml</code>并分别进行部署或显示。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> [[ <span class="string">&quot;<span class="variable">$#</span>&quot;</span> -gt 0 ]]; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">        -h|--<span class="built_in">help</span>) </span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;Usage: bash.sh [en|zh|all|show &lt;en|zh&gt;|-h]&quot;</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;Options:&quot;</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;  [deploy|d] en   Deploy English configuration to GitHub Pages&quot;</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;  [deploy|d] zh   Deploy Chinese configuration to GitHub Pages&quot;</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;  [deploy|d] all  Deploy both English and Chinese configurations to GitHub Pages&quot;</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;  [show|s] en     Execute npm run show for English configuration&quot;</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;  [show|s] zh     Execute npm run show for Chinese configuration&quot;</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;  -h, --help      Display this help message&quot;</span></span><br><span class="line">            <span class="built_in">exit</span> 0</span><br><span class="line">            ;;</span><br><span class="line">        d | deploy)</span><br><span class="line">            lang=<span class="variable">$2</span></span><br><span class="line">            <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$lang</span>&quot;</span> = <span class="string">&quot;en&quot;</span> ] || [ <span class="string">&quot;<span class="variable">$lang</span>&quot;</span> = <span class="string">&quot;zh&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">cp</span> <span class="string">&quot;config-<span class="variable">$lang</span>.yml&quot;</span> _config.yml</span><br><span class="line">                <span class="built_in">cp</span> <span class="string">&quot;config-butterfly-<span class="variable">$lang</span>.yml&quot;</span> <span class="string">&quot;_config.butterfly.yml&quot;</span></span><br><span class="line">                npm run kk</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;Deploy <span class="variable">$1</span> success!&quot;</span></span><br><span class="line">            <span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$lang</span>&quot;</span> = <span class="string">&quot;all&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">                <span class="keyword">for</span> lang_choice <span class="keyword">in</span> <span class="string">&quot;zh&quot;</span> <span class="string">&quot;en&quot;</span>; <span class="keyword">do</span></span><br><span class="line">                    <span class="built_in">cp</span> <span class="string">&quot;config-<span class="variable">$lang_choice</span>.yml&quot;</span> _config.yml</span><br><span class="line">                    <span class="built_in">cp</span> <span class="string">&quot;config-butterfly-<span class="variable">$lang_choice</span>.yml&quot;</span> <span class="string">&quot;_config.butterfly.yml&quot;</span></span><br><span class="line">                    npm run kk</span><br><span class="line">                    <span class="built_in">echo</span> <span class="string">&quot;Deploy <span class="variable">$lang_choice</span> success!&quot;</span></span><br><span class="line">                <span class="keyword">done</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;Error! Please input &#x27;en&#x27; or &#x27;zh&#x27; or &#x27;all&#x27;!&quot;</span></span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">            ;;</span><br><span class="line">        s | show)</span><br><span class="line">            lang=<span class="variable">$2</span></span><br><span class="line">            <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$lang</span>&quot;</span> = <span class="string">&quot;en&quot;</span> ] || [ <span class="string">&quot;<span class="variable">$lang</span>&quot;</span> = <span class="string">&quot;zh&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">cp</span> <span class="string">&quot;config-<span class="variable">$lang</span>.yml&quot;</span> _config.yml</span><br><span class="line">                <span class="built_in">cp</span> <span class="string">&quot;config-butterfly-<span class="variable">$lang</span>.yml&quot;</span> <span class="string">&quot;_config.butterfly.yml&quot;</span></span><br><span class="line">                npm run show</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;Running npm show!&quot;</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;Error! Please use &#x27;./bash.sh show en&#x27; or &#x27;./bash.sh show zh&#x27;!&quot;</span></span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">            <span class="built_in">shift</span> <span class="comment"># Move to the next argument after &#x27;show&#x27;</span></span><br><span class="line">            ;;</span><br><span class="line">        *)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;Error! Please input deploy &lt;en|zh|all&gt; or &#x27;show &lt;en|zh&gt;&#x27; or &#x27;-h&#x27; for help!&quot;</span></span><br><span class="line">            <span class="built_in">exit</span> 1</span><br><span class="line">            ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line">    <span class="built_in">shift</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>之后将该文件通过命令行设为可执行文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x deploy.sh</span><br></pre></td></tr></table></figure><p>此后，只要输入指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./deploy.sh d all</span><br></pre></td></tr></table></figure><p>即可将所有语言均予部署。</p><h2 id="TikZ支持">TikZ支持</h2><p>通过指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-filter-tikzjax</span><br></pre></td></tr></table></figure><p>实现对TiKz包的安装。这个包将支持把TikZ代码渲染为SVG矢量图；只需要在每篇文章的<code>Front matters</code>区域输入<code>tikzjax: true</code>即可。</p><p>详细操作可以通过<a href="https://github.com/prinsss/hexo-filter-tikzjax">这里</a>寻得。</p><h2 id="Troubleshoot">Troubleshoot</h2><p>后续在实际撰稿过程中遇到了一些问题，在这里列举。</p><h3 id="过大文件">过大文件</h3><p>由于GitHub本身对上传的单个文件空间大小有要求（不得超过100MB），因此不建议上传视频。</p><p>如误上传了超过100MB的文件，命令行会在push时返回信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">remote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.</span><br></pre></td></tr></table></figure><p>在稿件中对应位置移除该大文件后push，依然会有此报错。解决此问题，需要在<code>.deploy_git</code>文件夹中打开命令行，输入指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><p>通过回车寻找上传大文件前的最后一个版本（可以根据时间找；也可以是更早的版本），复制这一版本对应<code>commit</code>后方的版本号。</p><p>假定命令行有输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">commit 6657f1c73af4254557e77c3dd2c681ddf10e5d51 (HEAD -&gt; master)</span><br><span class="line">Author: K-PK66 &lt;example@example.com&gt;</span><br><span class="line">Date:   Mon Jun 3 12:26:51 2024 +0800</span><br><span class="line"></span><br><span class="line">    Site updated: 2024-06-03 12:26:49</span><br><span class="line"></span><br><span class="line">commit 35a21f2e94c5022503cfbce29ff2dacf2b497cd2</span><br><span class="line">Author: K-PK66 &lt;example@example.com&gt;</span><br><span class="line">Date:   Mon Jun 3 01:28:30 2024 +0800</span><br><span class="line"></span><br><span class="line">    Site updated: 2024-06-03 01:28:30</span><br></pre></td></tr></table></figure><p>想要恢复至2024年6月3日东八区时间1时28分30秒的版本，则需要用指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset 35a21f2e94c5022503cfbce29ff2dacf2b497cd2</span><br></pre></td></tr></table></figure><p>将<code>.deploy_git</code>恢复至当时。然后再进行推送即可恢复正常。</p><h3 id="字体">字体</h3><p>通过在主题文件夹中的<code>source</code>文件夹中新建<code>fonts</code>文件夹，并向其中放入字体<code>ttf</code>（或<code>otf</code>，<code>woff</code>等）扩展名的字体文件。随后在主题文件夹中<code>css</code>文件夹新建<code>css</code>文件并向其中引入该字体。</p><p>以向本博客引入字体“A-OTF Shin Go Pro Regular”，并将其命名为“A-OTF Shin Go Pro R”为例。将名为<code>AOTFShinGoProRegular.woff</code>的字体文件放入<code>fonts</code>文件夹，随后在<code>css</code>文件夹中新建<code>my.css</code>并编写如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;A-OTF Shin Go Pro R&#x27;</span>;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">local</span>(<span class="string">&#x27;A-OTF Shin Go Pro R&#x27;</span>), <span class="built_in">url</span>(<span class="string">&#x27;../fonts/AOTFShinGoProRegular.woff&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;A-OTF Shin Go Pro R&#x27;</span>, sans-serif;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后在主题<code>_config.yml</code>文件中指定板块写如下代码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Inject</span></span><br><span class="line"><span class="comment"># Insert the code to head (before &#x27;&lt;/head&gt;&#x27; tag) and the bottom (before &#x27;&lt;/body&gt;&#x27; tag)</span></span><br><span class="line"><span class="comment"># 插入代码到头部 &lt;/head&gt; 之前 和 底部 &lt;/body&gt; 之前</span></span><br><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/my.css&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">  <span class="comment"># - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>即可。</p><p>特别地，如果仅想对特定的字母/符号使用该字体，可使用在线字体提取工具（例如<a href="https://font-subset.disidu.com">这个工具</a>）对指定字符的该字体进行提取并重新包装为新字体文件，按上述方法安装。</p><h3 id="上传过程中遭遇卡顿（仅限中国大陆地区）">上传过程中遭遇卡顿（仅限中国大陆地区）</h3><p>由于GitHub在中国大陆地区的访问过程中已经收到严重的DNS污染，不可避免地会出现在使用上传博客指令后无法连接GitHub服务器（或上传过程中断开连接）的情况。针对此可灵活使用中国大陆访问较快的Gitee进行操作。</p><blockquote>由于Gitee Pages在2022年左右起已经停止服务，所以此处不推荐直接在Gitee上建立仓库的手段。</blockquote><p>首先建立一个Gitee账号并创建仓库。之后在该仓库“管理/仓库镜像管理”中设置GitHub的仓库作为Gitee仓库的镜像，并设置方向为由Gitee仓库Push到GitHub仓库。随后在GitHub个人设置中使用先前“<a href="#GitHub%E7%9A%84%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81">GitHub的身份验证</a>”章节提到的方法生成权限密钥之后在指定位置输入；在完成添加镜像后，将<code>_config.yml</code>指定位置修改如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="comment">#- type: git</span></span><br><span class="line">  <span class="comment">#  repo: https://github.com/k-pk66/k-pk66.github.io.git</span></span><br><span class="line">  <span class="comment">#  branch: master</span></span><br><span class="line">  - <span class="built_in">type</span>: git</span><br><span class="line">    repo: git@gitee.com:k-pk66/blog.git</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure><p>再输入博客上传指令，命令行将会在Gitee的仓库中更新博客；而仓库更新后会自动将更改写入GitHub。这时可以明显感觉到上传的速度增快了。</p>]]></content>
      
      
      <categories>
          
          <category> Configuration </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #环境配置# </tag>
            
            <tag> #命令行# </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
